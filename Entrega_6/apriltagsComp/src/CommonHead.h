// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `CommonHead.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __CommonHead_h__
#define __CommonHead_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <JointMotor.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompCommonHead
{

class CommonHead;
class CommonHeadPrx;

}

namespace RoboCompCommonHead
{

using dmotorParams = ::std::map<::std::string, ::RoboCompJointMotor::MotorParams>;

struct THeadParams
{
    dmotorParams motorsParams;
    ::std::string model;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */

    std::tuple<const dmotorParams&, const ::std::string&> ice_tuple() const
    {
        return std::tie(motorsParams, model);
    }
};

using dmotorsState = ::std::map<::std::string, ::RoboCompJointMotor::MotorState>;

struct THeadState
{
    dmotorsState motorsState;
    bool isMoving;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */

    std::tuple<const dmotorsState&, const bool&> ice_tuple() const
    {
        return std::tie(motorsState, isMoving);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompCommonHead
{

/**
 * \interface HeadParams
 * @brief interface HeadParams
 */
class CommonHead : public virtual ::Ice::Object
{
public:

    using ProxyType = CommonHeadPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void resetHead(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_resetHead(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void stopHead(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_stopHead(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setPanLeft(float pan, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setPanLeft(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setPanRight(float pan, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setPanRight(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setTilt(float tilt, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setTilt(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setNeck(float neck, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setNeck(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void saccadic2DLeft(float leftPan, float tilt, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_saccadic2DLeft(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void saccadic2DRight(float rightPan, float tilt, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_saccadic2DRight(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void saccadic3D(float leftPan, float rightPan, float tilt, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_saccadic3D(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void saccadic4D(float leftPan, float rightPan, float tilt, float neck, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_saccadic4D(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setNMotorsPosition(::RoboCompJointMotor::MotorGoalPositionList listGoals, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setNMotorsPosition(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual THeadParams getHeadParams(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getHeadParams(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void getHeadState(THeadState& hState, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getHeadState(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool isMovingHead(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_isMovingHead(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompCommonHead
{

/**
 * \interface HeadParams
 * @brief interface HeadParams
 */
class CommonHeadPrx : public virtual ::Ice::Proxy<CommonHeadPrx, ::Ice::ObjectPrx>
{
public:

    void resetHead(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CommonHeadPrx::_iceI_resetHead, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto resetHeadAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CommonHeadPrx::_iceI_resetHead, context);
    }

    ::std::function<void()>
    resetHeadAsync(::std::function<void()> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &CommonHeadPrx::_iceI_resetHead, context);
    }

    /// \cond INTERNAL
    void _iceI_resetHead(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void stopHead(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CommonHeadPrx::_iceI_stopHead, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto stopHeadAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CommonHeadPrx::_iceI_stopHead, context);
    }

    ::std::function<void()>
    stopHeadAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &CommonHeadPrx::_iceI_stopHead, context);
    }

    /// \cond INTERNAL
    void _iceI_stopHead(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void setPanLeft(float pan, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CommonHeadPrx::_iceI_setPanLeft, pan, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setPanLeftAsync(float pan, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CommonHeadPrx::_iceI_setPanLeft, pan, context);
    }

    ::std::function<void()>
    setPanLeftAsync(float pan,
                    ::std::function<void()> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &CommonHeadPrx::_iceI_setPanLeft, pan, context);
    }

    /// \cond INTERNAL
    void _iceI_setPanLeft(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, float, const ::Ice::Context&);
    /// \endcond

    void setPanRight(float pan, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CommonHeadPrx::_iceI_setPanRight, pan, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setPanRightAsync(float pan, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CommonHeadPrx::_iceI_setPanRight, pan, context);
    }

    ::std::function<void()>
    setPanRightAsync(float pan,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &CommonHeadPrx::_iceI_setPanRight, pan, context);
    }

    /// \cond INTERNAL
    void _iceI_setPanRight(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, float, const ::Ice::Context&);
    /// \endcond

    void setTilt(float tilt, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CommonHeadPrx::_iceI_setTilt, tilt, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setTiltAsync(float tilt, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CommonHeadPrx::_iceI_setTilt, tilt, context);
    }

    ::std::function<void()>
    setTiltAsync(float tilt,
                 ::std::function<void()> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &CommonHeadPrx::_iceI_setTilt, tilt, context);
    }

    /// \cond INTERNAL
    void _iceI_setTilt(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, float, const ::Ice::Context&);
    /// \endcond

    void setNeck(float neck, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CommonHeadPrx::_iceI_setNeck, neck, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setNeckAsync(float neck, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CommonHeadPrx::_iceI_setNeck, neck, context);
    }

    ::std::function<void()>
    setNeckAsync(float neck,
                 ::std::function<void()> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &CommonHeadPrx::_iceI_setNeck, neck, context);
    }

    /// \cond INTERNAL
    void _iceI_setNeck(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, float, const ::Ice::Context&);
    /// \endcond

    void saccadic2DLeft(float leftPan, float tilt, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CommonHeadPrx::_iceI_saccadic2DLeft, leftPan, tilt, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto saccadic2DLeftAsync(float leftPan, float tilt, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CommonHeadPrx::_iceI_saccadic2DLeft, leftPan, tilt, context);
    }

    ::std::function<void()>
    saccadic2DLeftAsync(float leftPan, float tilt,
                        ::std::function<void()> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &CommonHeadPrx::_iceI_saccadic2DLeft, leftPan, tilt, context);
    }

    /// \cond INTERNAL
    void _iceI_saccadic2DLeft(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, float, float, const ::Ice::Context&);
    /// \endcond

    void saccadic2DRight(float rightPan, float tilt, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CommonHeadPrx::_iceI_saccadic2DRight, rightPan, tilt, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto saccadic2DRightAsync(float rightPan, float tilt, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CommonHeadPrx::_iceI_saccadic2DRight, rightPan, tilt, context);
    }

    ::std::function<void()>
    saccadic2DRightAsync(float rightPan, float tilt,
                         ::std::function<void()> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &CommonHeadPrx::_iceI_saccadic2DRight, rightPan, tilt, context);
    }

    /// \cond INTERNAL
    void _iceI_saccadic2DRight(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, float, float, const ::Ice::Context&);
    /// \endcond

    void saccadic3D(float leftPan, float rightPan, float tilt, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CommonHeadPrx::_iceI_saccadic3D, leftPan, rightPan, tilt, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto saccadic3DAsync(float leftPan, float rightPan, float tilt, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CommonHeadPrx::_iceI_saccadic3D, leftPan, rightPan, tilt, context);
    }

    ::std::function<void()>
    saccadic3DAsync(float leftPan, float rightPan, float tilt,
                    ::std::function<void()> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &CommonHeadPrx::_iceI_saccadic3D, leftPan, rightPan, tilt, context);
    }

    /// \cond INTERNAL
    void _iceI_saccadic3D(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, float, float, float, const ::Ice::Context&);
    /// \endcond

    void saccadic4D(float leftPan, float rightPan, float tilt, float neck, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CommonHeadPrx::_iceI_saccadic4D, leftPan, rightPan, tilt, neck, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto saccadic4DAsync(float leftPan, float rightPan, float tilt, float neck, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CommonHeadPrx::_iceI_saccadic4D, leftPan, rightPan, tilt, neck, context);
    }

    ::std::function<void()>
    saccadic4DAsync(float leftPan, float rightPan, float tilt, float neck,
                    ::std::function<void()> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &CommonHeadPrx::_iceI_saccadic4D, leftPan, rightPan, tilt, neck, context);
    }

    /// \cond INTERNAL
    void _iceI_saccadic4D(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, float, float, float, float, const ::Ice::Context&);
    /// \endcond

    void setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList& listGoals, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CommonHeadPrx::_iceI_setNMotorsPosition, listGoals, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setNMotorsPositionAsync(const ::RoboCompJointMotor::MotorGoalPositionList& listGoals, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CommonHeadPrx::_iceI_setNMotorsPosition, listGoals, context);
    }

    ::std::function<void()>
    setNMotorsPositionAsync(const ::RoboCompJointMotor::MotorGoalPositionList& listGoals,
                            ::std::function<void()> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &CommonHeadPrx::_iceI_setNMotorsPosition, listGoals, context);
    }

    /// \cond INTERNAL
    void _iceI_setNMotorsPosition(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::RoboCompJointMotor::MotorGoalPositionList&, const ::Ice::Context&);
    /// \endcond

    THeadParams getHeadParams(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<THeadParams>(true, this, &CommonHeadPrx::_iceI_getHeadParams, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getHeadParamsAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<THeadParams>>().get_future())
    {
        return _makePromiseOutgoing<THeadParams, P>(false, this, &CommonHeadPrx::_iceI_getHeadParams, context);
    }

    ::std::function<void()>
    getHeadParamsAsync(::std::function<void(THeadParams)> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<THeadParams>(response, ex, sent, this, &CommonHeadPrx::_iceI_getHeadParams, context);
    }

    /// \cond INTERNAL
    void _iceI_getHeadParams(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<THeadParams>>&, const ::Ice::Context&);
    /// \endcond

    void getHeadState(THeadState& hState, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        hState = _makePromiseOutgoing<THeadState>(true, this, &CommonHeadPrx::_iceI_getHeadState, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getHeadStateAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<THeadState>>().get_future())
    {
        return _makePromiseOutgoing<THeadState, P>(false, this, &CommonHeadPrx::_iceI_getHeadState, context);
    }

    ::std::function<void()>
    getHeadStateAsync(::std::function<void(THeadState)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<THeadState>(response, ex, sent, this, &CommonHeadPrx::_iceI_getHeadState, context);
    }

    /// \cond INTERNAL
    void _iceI_getHeadState(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<THeadState>>&, const ::Ice::Context&);
    /// \endcond

    bool isMovingHead(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &CommonHeadPrx::_iceI_isMovingHead, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto isMovingHeadAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &CommonHeadPrx::_iceI_isMovingHead, context);
    }

    ::std::function<void()>
    isMovingHeadAsync(::std::function<void(bool)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<bool>(response, ex, sent, this, &CommonHeadPrx::_iceI_isMovingHead, context);
    }

    /// \cond INTERNAL
    void _iceI_isMovingHead(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    CommonHeadPrx() = default;
    friend ::std::shared_ptr<CommonHeadPrx> IceInternal::createProxy<CommonHeadPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::RoboCompCommonHead::THeadParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompCommonHead::THeadParams, S>
{
    static void read(S* istr, ::RoboCompCommonHead::THeadParams& v)
    {
        istr->readAll(v.motorsParams, v.model);
    }
};

template<>
struct StreamableTraits<::RoboCompCommonHead::THeadState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompCommonHead::THeadState, S>
{
    static void read(S* istr, ::RoboCompCommonHead::THeadState& v)
    {
        istr->readAll(v.motorsState, v.isMoving);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompCommonHead
{

using CommonHeadPtr = ::std::shared_ptr<CommonHead>;
using CommonHeadPrxPtr = ::std::shared_ptr<CommonHeadPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompCommonHead
{

class CommonHead;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompCommonHead::CommonHead>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompCommonHead::CommonHead*);
/// \endcond

}

}

namespace RoboCompCommonHead
{

class CommonHead;
/// \cond INTERNAL
::Ice::Object* upCast(CommonHead*);
/// \endcond
typedef ::IceInternal::Handle< CommonHead> CommonHeadPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompCommonHead::CommonHead> CommonHeadPrx;
typedef CommonHeadPrx CommonHeadPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(CommonHeadPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompCommonHead
{

typedef ::std::map< ::std::string, RoboCompJointMotor::MotorParams> dmotorParams;

struct THeadParams
{
    dmotorParams motorsParams;
    ::std::string model;
};

typedef ::std::map< ::std::string, RoboCompJointMotor::MotorState> dmotorsState;

struct THeadState
{
    dmotorsState motorsState;
    bool isMoving;
};

}

namespace RoboCompCommonHead
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_resetHead.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_resetHead.
 */
class Callback_CommonHead_resetHead_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_resetHead_Base> Callback_CommonHead_resetHeadPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_stopHead.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_stopHead.
 */
class Callback_CommonHead_stopHead_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_stopHead_Base> Callback_CommonHead_stopHeadPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_setPanLeft.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_setPanLeft.
 */
class Callback_CommonHead_setPanLeft_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_setPanLeft_Base> Callback_CommonHead_setPanLeftPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_setPanRight.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_setPanRight.
 */
class Callback_CommonHead_setPanRight_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_setPanRight_Base> Callback_CommonHead_setPanRightPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_setTilt.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_setTilt.
 */
class Callback_CommonHead_setTilt_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_setTilt_Base> Callback_CommonHead_setTiltPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_setNeck.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_setNeck.
 */
class Callback_CommonHead_setNeck_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_setNeck_Base> Callback_CommonHead_setNeckPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic2DLeft.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_saccadic2DLeft.
 */
class Callback_CommonHead_saccadic2DLeft_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_saccadic2DLeft_Base> Callback_CommonHead_saccadic2DLeftPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic2DRight.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_saccadic2DRight.
 */
class Callback_CommonHead_saccadic2DRight_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_saccadic2DRight_Base> Callback_CommonHead_saccadic2DRightPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic3D.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_saccadic3D.
 */
class Callback_CommonHead_saccadic3D_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_saccadic3D_Base> Callback_CommonHead_saccadic3DPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic4D.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_saccadic4D.
 */
class Callback_CommonHead_saccadic4D_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_saccadic4D_Base> Callback_CommonHead_saccadic4DPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_setNMotorsPosition.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_setNMotorsPosition.
 */
class Callback_CommonHead_setNMotorsPosition_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_setNMotorsPosition_Base> Callback_CommonHead_setNMotorsPositionPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_getHeadParams.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_getHeadParams.
 */
class Callback_CommonHead_getHeadParams_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_getHeadParams_Base> Callback_CommonHead_getHeadParamsPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_getHeadState.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_getHeadState.
 */
class Callback_CommonHead_getHeadState_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_getHeadState_Base> Callback_CommonHead_getHeadStatePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_isMovingHead.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_isMovingHead.
 */
class Callback_CommonHead_isMovingHead_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_isMovingHead_Base> Callback_CommonHead_isMovingHeadPtr;

}

namespace IceProxy
{

namespace RoboCompCommonHead
{

class CommonHead : public virtual ::Ice::Proxy<CommonHead, ::IceProxy::Ice::Object>
{
public:

    void resetHead(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_resetHead(_iceI_begin_resetHead(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_resetHead(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_resetHead(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_resetHead(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_resetHead(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_resetHead(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_resetHead(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_resetHead(const ::RoboCompCommonHead::Callback_CommonHead_resetHeadPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_resetHead(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_resetHead(const ::Ice::Context& context, const ::RoboCompCommonHead::Callback_CommonHead_resetHeadPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_resetHead(context, cb, cookie);
    }

    void end_resetHead(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_resetHead(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void stopHead(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_stopHead(_iceI_begin_stopHead(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_stopHead(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_stopHead(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stopHead(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stopHead(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_stopHead(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stopHead(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_stopHead(const ::RoboCompCommonHead::Callback_CommonHead_stopHeadPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stopHead(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_stopHead(const ::Ice::Context& context, const ::RoboCompCommonHead::Callback_CommonHead_stopHeadPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stopHead(context, cb, cookie);
    }

    void end_stopHead(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_stopHead(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setPanLeft(::Ice::Float pan, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setPanLeft(_iceI_begin_setPanLeft(pan, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setPanLeft(::Ice::Float pan, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setPanLeft(pan, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPanLeft(::Ice::Float pan, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPanLeft(pan, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPanLeft(::Ice::Float pan, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPanLeft(pan, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPanLeft(::Ice::Float pan, const ::RoboCompCommonHead::Callback_CommonHead_setPanLeftPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPanLeft(pan, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPanLeft(::Ice::Float pan, const ::Ice::Context& context, const ::RoboCompCommonHead::Callback_CommonHead_setPanLeftPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPanLeft(pan, context, cb, cookie);
    }

    void end_setPanLeft(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setPanLeft(::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setPanRight(::Ice::Float pan, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setPanRight(_iceI_begin_setPanRight(pan, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setPanRight(::Ice::Float pan, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setPanRight(pan, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPanRight(::Ice::Float pan, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPanRight(pan, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPanRight(::Ice::Float pan, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPanRight(pan, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPanRight(::Ice::Float pan, const ::RoboCompCommonHead::Callback_CommonHead_setPanRightPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPanRight(pan, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPanRight(::Ice::Float pan, const ::Ice::Context& context, const ::RoboCompCommonHead::Callback_CommonHead_setPanRightPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPanRight(pan, context, cb, cookie);
    }

    void end_setPanRight(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setPanRight(::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setTilt(::Ice::Float tilt, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setTilt(_iceI_begin_setTilt(tilt, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setTilt(::Ice::Float tilt, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setTilt(tilt, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTilt(::Ice::Float tilt, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setTilt(tilt, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setTilt(::Ice::Float tilt, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setTilt(tilt, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setTilt(::Ice::Float tilt, const ::RoboCompCommonHead::Callback_CommonHead_setTiltPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setTilt(tilt, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setTilt(::Ice::Float tilt, const ::Ice::Context& context, const ::RoboCompCommonHead::Callback_CommonHead_setTiltPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setTilt(tilt, context, cb, cookie);
    }

    void end_setTilt(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setTilt(::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setNeck(::Ice::Float neck, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setNeck(_iceI_begin_setNeck(neck, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setNeck(::Ice::Float neck, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setNeck(neck, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setNeck(::Ice::Float neck, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setNeck(neck, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setNeck(::Ice::Float neck, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setNeck(neck, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setNeck(::Ice::Float neck, const ::RoboCompCommonHead::Callback_CommonHead_setNeckPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setNeck(neck, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setNeck(::Ice::Float neck, const ::Ice::Context& context, const ::RoboCompCommonHead::Callback_CommonHead_setNeckPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setNeck(neck, context, cb, cookie);
    }

    void end_setNeck(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setNeck(::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void saccadic2DLeft(::Ice::Float leftPan, ::Ice::Float tilt, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_saccadic2DLeft(_iceI_begin_saccadic2DLeft(leftPan, tilt, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_saccadic2DLeft(::Ice::Float leftPan, ::Ice::Float tilt, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_saccadic2DLeft(leftPan, tilt, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_saccadic2DLeft(::Ice::Float leftPan, ::Ice::Float tilt, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_saccadic2DLeft(leftPan, tilt, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic2DLeft(::Ice::Float leftPan, ::Ice::Float tilt, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_saccadic2DLeft(leftPan, tilt, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic2DLeft(::Ice::Float leftPan, ::Ice::Float tilt, const ::RoboCompCommonHead::Callback_CommonHead_saccadic2DLeftPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_saccadic2DLeft(leftPan, tilt, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic2DLeft(::Ice::Float leftPan, ::Ice::Float tilt, const ::Ice::Context& context, const ::RoboCompCommonHead::Callback_CommonHead_saccadic2DLeftPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_saccadic2DLeft(leftPan, tilt, context, cb, cookie);
    }

    void end_saccadic2DLeft(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_saccadic2DLeft(::Ice::Float, ::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void saccadic2DRight(::Ice::Float rightPan, ::Ice::Float tilt, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_saccadic2DRight(_iceI_begin_saccadic2DRight(rightPan, tilt, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_saccadic2DRight(::Ice::Float rightPan, ::Ice::Float tilt, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_saccadic2DRight(rightPan, tilt, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_saccadic2DRight(::Ice::Float rightPan, ::Ice::Float tilt, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_saccadic2DRight(rightPan, tilt, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic2DRight(::Ice::Float rightPan, ::Ice::Float tilt, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_saccadic2DRight(rightPan, tilt, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic2DRight(::Ice::Float rightPan, ::Ice::Float tilt, const ::RoboCompCommonHead::Callback_CommonHead_saccadic2DRightPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_saccadic2DRight(rightPan, tilt, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic2DRight(::Ice::Float rightPan, ::Ice::Float tilt, const ::Ice::Context& context, const ::RoboCompCommonHead::Callback_CommonHead_saccadic2DRightPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_saccadic2DRight(rightPan, tilt, context, cb, cookie);
    }

    void end_saccadic2DRight(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_saccadic2DRight(::Ice::Float, ::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void saccadic3D(::Ice::Float leftPan, ::Ice::Float rightPan, ::Ice::Float tilt, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_saccadic3D(_iceI_begin_saccadic3D(leftPan, rightPan, tilt, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_saccadic3D(::Ice::Float leftPan, ::Ice::Float rightPan, ::Ice::Float tilt, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_saccadic3D(leftPan, rightPan, tilt, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_saccadic3D(::Ice::Float leftPan, ::Ice::Float rightPan, ::Ice::Float tilt, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_saccadic3D(leftPan, rightPan, tilt, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic3D(::Ice::Float leftPan, ::Ice::Float rightPan, ::Ice::Float tilt, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_saccadic3D(leftPan, rightPan, tilt, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic3D(::Ice::Float leftPan, ::Ice::Float rightPan, ::Ice::Float tilt, const ::RoboCompCommonHead::Callback_CommonHead_saccadic3DPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_saccadic3D(leftPan, rightPan, tilt, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic3D(::Ice::Float leftPan, ::Ice::Float rightPan, ::Ice::Float tilt, const ::Ice::Context& context, const ::RoboCompCommonHead::Callback_CommonHead_saccadic3DPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_saccadic3D(leftPan, rightPan, tilt, context, cb, cookie);
    }

    void end_saccadic3D(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_saccadic3D(::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void saccadic4D(::Ice::Float leftPan, ::Ice::Float rightPan, ::Ice::Float tilt, ::Ice::Float neck, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_saccadic4D(_iceI_begin_saccadic4D(leftPan, rightPan, tilt, neck, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_saccadic4D(::Ice::Float leftPan, ::Ice::Float rightPan, ::Ice::Float tilt, ::Ice::Float neck, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_saccadic4D(leftPan, rightPan, tilt, neck, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_saccadic4D(::Ice::Float leftPan, ::Ice::Float rightPan, ::Ice::Float tilt, ::Ice::Float neck, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_saccadic4D(leftPan, rightPan, tilt, neck, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic4D(::Ice::Float leftPan, ::Ice::Float rightPan, ::Ice::Float tilt, ::Ice::Float neck, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_saccadic4D(leftPan, rightPan, tilt, neck, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic4D(::Ice::Float leftPan, ::Ice::Float rightPan, ::Ice::Float tilt, ::Ice::Float neck, const ::RoboCompCommonHead::Callback_CommonHead_saccadic4DPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_saccadic4D(leftPan, rightPan, tilt, neck, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic4D(::Ice::Float leftPan, ::Ice::Float rightPan, ::Ice::Float tilt, ::Ice::Float neck, const ::Ice::Context& context, const ::RoboCompCommonHead::Callback_CommonHead_saccadic4DPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_saccadic4D(leftPan, rightPan, tilt, neck, context, cb, cookie);
    }

    void end_saccadic4D(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_saccadic4D(::Ice::Float, ::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList& listGoals, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setNMotorsPosition(_iceI_begin_setNMotorsPosition(listGoals, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList& listGoals, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setNMotorsPosition(listGoals, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList& listGoals, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setNMotorsPosition(listGoals, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList& listGoals, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setNMotorsPosition(listGoals, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList& listGoals, const ::RoboCompCommonHead::Callback_CommonHead_setNMotorsPositionPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setNMotorsPosition(listGoals, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList& listGoals, const ::Ice::Context& context, const ::RoboCompCommonHead::Callback_CommonHead_setNMotorsPositionPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setNMotorsPosition(listGoals, context, cb, cookie);
    }

    void end_setNMotorsPosition(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompCommonHead::THeadParams getHeadParams(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getHeadParams(_iceI_begin_getHeadParams(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getHeadParams(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getHeadParams(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getHeadParams(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getHeadParams(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getHeadParams(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getHeadParams(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getHeadParams(const ::RoboCompCommonHead::Callback_CommonHead_getHeadParamsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getHeadParams(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getHeadParams(const ::Ice::Context& context, const ::RoboCompCommonHead::Callback_CommonHead_getHeadParamsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getHeadParams(context, cb, cookie);
    }

    ::RoboCompCommonHead::THeadParams end_getHeadParams(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getHeadParams(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void getHeadState(::RoboCompCommonHead::THeadState& hState, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getHeadState(hState, _iceI_begin_getHeadState(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getHeadState(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getHeadState(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getHeadState(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getHeadState(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getHeadState(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getHeadState(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getHeadState(const ::RoboCompCommonHead::Callback_CommonHead_getHeadStatePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getHeadState(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getHeadState(const ::Ice::Context& context, const ::RoboCompCommonHead::Callback_CommonHead_getHeadStatePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getHeadState(context, cb, cookie);
    }

    void end_getHeadState(::RoboCompCommonHead::THeadState& hState, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_getHeadState(::RoboCompCommonHead::THeadState& iceP_hState, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_getHeadState(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    bool isMovingHead(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_isMovingHead(_iceI_begin_isMovingHead(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_isMovingHead(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_isMovingHead(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isMovingHead(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_isMovingHead(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_isMovingHead(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_isMovingHead(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_isMovingHead(const ::RoboCompCommonHead::Callback_CommonHead_isMovingHeadPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_isMovingHead(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_isMovingHead(const ::Ice::Context& context, const ::RoboCompCommonHead::Callback_CommonHead_isMovingHeadPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_isMovingHead(context, cb, cookie);
    }

    bool end_isMovingHead(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_isMovingHead(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompCommonHead
{

/**
 * \interface HeadParams
 * @brief interface HeadParams
 */
class CommonHead : public virtual ::Ice::Object
{
public:

    typedef CommonHeadPrx ProxyType;
    typedef CommonHeadPtr PointerType;

    virtual ~CommonHead();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void resetHead(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_resetHead(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void stopHead(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_stopHead(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setPanLeft(::Ice::Float pan, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_setPanLeft(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setPanRight(::Ice::Float pan, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_setPanRight(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setTilt(::Ice::Float tilt, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_setTilt(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setNeck(::Ice::Float neck, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_setNeck(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void saccadic2DLeft(::Ice::Float leftPan, ::Ice::Float tilt, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_saccadic2DLeft(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void saccadic2DRight(::Ice::Float rightPan, ::Ice::Float tilt, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_saccadic2DRight(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void saccadic3D(::Ice::Float leftPan, ::Ice::Float rightPan, ::Ice::Float tilt, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_saccadic3D(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void saccadic4D(::Ice::Float leftPan, ::Ice::Float rightPan, ::Ice::Float tilt, ::Ice::Float neck, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_saccadic4D(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList& listGoals, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_setNMotorsPosition(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual THeadParams getHeadParams(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getHeadParams(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void getHeadState(THeadState& hState, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getHeadState(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool isMovingHead(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_isMovingHead(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const CommonHead& lhs, const CommonHead& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const CommonHead& lhs, const CommonHead& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompCommonHead::THeadParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompCommonHead::THeadParams, S>
{
    static void write(S* ostr, const ::RoboCompCommonHead::THeadParams& v)
    {
        ostr->write(v.motorsParams);
        ostr->write(v.model);
    }
};

template<typename S>
struct StreamReader< ::RoboCompCommonHead::THeadParams, S>
{
    static void read(S* istr, ::RoboCompCommonHead::THeadParams& v)
    {
        istr->read(v.motorsParams);
        istr->read(v.model);
    }
};

template<>
struct StreamableTraits< ::RoboCompCommonHead::THeadState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompCommonHead::THeadState, S>
{
    static void write(S* ostr, const ::RoboCompCommonHead::THeadState& v)
    {
        ostr->write(v.motorsState);
        ostr->write(v.isMoving);
    }
};

template<typename S>
struct StreamReader< ::RoboCompCommonHead::THeadState, S>
{
    static void read(S* istr, ::RoboCompCommonHead::THeadState& v)
    {
        istr->read(v.motorsState);
        istr->read(v.isMoving);
    }
};

}
/// \endcond

namespace RoboCompCommonHead
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_resetHead.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_resetHead.
 */
template<class T>
class CallbackNC_CommonHead_resetHead : public Callback_CommonHead_resetHead_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_resetHead(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_resetHead.
 */
template<class T> Callback_CommonHead_resetHeadPtr
newCallback_CommonHead_resetHead(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_resetHead<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_resetHead.
 */
template<class T> Callback_CommonHead_resetHeadPtr
newCallback_CommonHead_resetHead(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_resetHead<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_resetHead.
 */
template<class T> Callback_CommonHead_resetHeadPtr
newCallback_CommonHead_resetHead(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_resetHead<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_resetHead.
 */
template<class T> Callback_CommonHead_resetHeadPtr
newCallback_CommonHead_resetHead(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_resetHead<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_resetHead.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_resetHead.
 */
template<class T, typename CT>
class Callback_CommonHead_resetHead : public Callback_CommonHead_resetHead_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_resetHead(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_resetHead.
 */
template<class T, typename CT> Callback_CommonHead_resetHeadPtr
newCallback_CommonHead_resetHead(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_resetHead<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_resetHead.
 */
template<class T, typename CT> Callback_CommonHead_resetHeadPtr
newCallback_CommonHead_resetHead(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_resetHead<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_resetHead.
 */
template<class T, typename CT> Callback_CommonHead_resetHeadPtr
newCallback_CommonHead_resetHead(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_resetHead<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_resetHead.
 */
template<class T, typename CT> Callback_CommonHead_resetHeadPtr
newCallback_CommonHead_resetHead(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_resetHead<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_stopHead.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_stopHead.
 */
template<class T>
class CallbackNC_CommonHead_stopHead : public Callback_CommonHead_stopHead_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_stopHead(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_stopHead.
 */
template<class T> Callback_CommonHead_stopHeadPtr
newCallback_CommonHead_stopHead(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_stopHead<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_stopHead.
 */
template<class T> Callback_CommonHead_stopHeadPtr
newCallback_CommonHead_stopHead(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_stopHead<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_stopHead.
 */
template<class T> Callback_CommonHead_stopHeadPtr
newCallback_CommonHead_stopHead(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_stopHead<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_stopHead.
 */
template<class T> Callback_CommonHead_stopHeadPtr
newCallback_CommonHead_stopHead(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_stopHead<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_stopHead.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_stopHead.
 */
template<class T, typename CT>
class Callback_CommonHead_stopHead : public Callback_CommonHead_stopHead_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_stopHead(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_stopHead.
 */
template<class T, typename CT> Callback_CommonHead_stopHeadPtr
newCallback_CommonHead_stopHead(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_stopHead<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_stopHead.
 */
template<class T, typename CT> Callback_CommonHead_stopHeadPtr
newCallback_CommonHead_stopHead(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_stopHead<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_stopHead.
 */
template<class T, typename CT> Callback_CommonHead_stopHeadPtr
newCallback_CommonHead_stopHead(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_stopHead<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_stopHead.
 */
template<class T, typename CT> Callback_CommonHead_stopHeadPtr
newCallback_CommonHead_stopHead(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_stopHead<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_setPanLeft.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_setPanLeft.
 */
template<class T>
class CallbackNC_CommonHead_setPanLeft : public Callback_CommonHead_setPanLeft_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_setPanLeft(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CommonHeadPrx proxy = CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setPanLeft(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setPanLeft.
 */
template<class T> Callback_CommonHead_setPanLeftPtr
newCallback_CommonHead_setPanLeft(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setPanLeft<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setPanLeft.
 */
template<class T> Callback_CommonHead_setPanLeftPtr
newCallback_CommonHead_setPanLeft(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setPanLeft<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setPanLeft.
 */
template<class T> Callback_CommonHead_setPanLeftPtr
newCallback_CommonHead_setPanLeft(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setPanLeft<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setPanLeft.
 */
template<class T> Callback_CommonHead_setPanLeftPtr
newCallback_CommonHead_setPanLeft(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setPanLeft<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_setPanLeft.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_setPanLeft.
 */
template<class T, typename CT>
class Callback_CommonHead_setPanLeft : public Callback_CommonHead_setPanLeft_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_setPanLeft(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CommonHeadPrx proxy = CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setPanLeft(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setPanLeft.
 */
template<class T, typename CT> Callback_CommonHead_setPanLeftPtr
newCallback_CommonHead_setPanLeft(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setPanLeft<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setPanLeft.
 */
template<class T, typename CT> Callback_CommonHead_setPanLeftPtr
newCallback_CommonHead_setPanLeft(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setPanLeft<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setPanLeft.
 */
template<class T, typename CT> Callback_CommonHead_setPanLeftPtr
newCallback_CommonHead_setPanLeft(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setPanLeft<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setPanLeft.
 */
template<class T, typename CT> Callback_CommonHead_setPanLeftPtr
newCallback_CommonHead_setPanLeft(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setPanLeft<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_setPanRight.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_setPanRight.
 */
template<class T>
class CallbackNC_CommonHead_setPanRight : public Callback_CommonHead_setPanRight_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_setPanRight(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CommonHeadPrx proxy = CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setPanRight(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setPanRight.
 */
template<class T> Callback_CommonHead_setPanRightPtr
newCallback_CommonHead_setPanRight(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setPanRight<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setPanRight.
 */
template<class T> Callback_CommonHead_setPanRightPtr
newCallback_CommonHead_setPanRight(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setPanRight<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setPanRight.
 */
template<class T> Callback_CommonHead_setPanRightPtr
newCallback_CommonHead_setPanRight(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setPanRight<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setPanRight.
 */
template<class T> Callback_CommonHead_setPanRightPtr
newCallback_CommonHead_setPanRight(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setPanRight<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_setPanRight.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_setPanRight.
 */
template<class T, typename CT>
class Callback_CommonHead_setPanRight : public Callback_CommonHead_setPanRight_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_setPanRight(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CommonHeadPrx proxy = CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setPanRight(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setPanRight.
 */
template<class T, typename CT> Callback_CommonHead_setPanRightPtr
newCallback_CommonHead_setPanRight(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setPanRight<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setPanRight.
 */
template<class T, typename CT> Callback_CommonHead_setPanRightPtr
newCallback_CommonHead_setPanRight(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setPanRight<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setPanRight.
 */
template<class T, typename CT> Callback_CommonHead_setPanRightPtr
newCallback_CommonHead_setPanRight(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setPanRight<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setPanRight.
 */
template<class T, typename CT> Callback_CommonHead_setPanRightPtr
newCallback_CommonHead_setPanRight(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setPanRight<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_setTilt.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_setTilt.
 */
template<class T>
class CallbackNC_CommonHead_setTilt : public Callback_CommonHead_setTilt_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_setTilt(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CommonHeadPrx proxy = CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setTilt(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setTilt.
 */
template<class T> Callback_CommonHead_setTiltPtr
newCallback_CommonHead_setTilt(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setTilt<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setTilt.
 */
template<class T> Callback_CommonHead_setTiltPtr
newCallback_CommonHead_setTilt(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setTilt<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setTilt.
 */
template<class T> Callback_CommonHead_setTiltPtr
newCallback_CommonHead_setTilt(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setTilt<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setTilt.
 */
template<class T> Callback_CommonHead_setTiltPtr
newCallback_CommonHead_setTilt(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setTilt<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_setTilt.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_setTilt.
 */
template<class T, typename CT>
class Callback_CommonHead_setTilt : public Callback_CommonHead_setTilt_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_setTilt(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CommonHeadPrx proxy = CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setTilt(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setTilt.
 */
template<class T, typename CT> Callback_CommonHead_setTiltPtr
newCallback_CommonHead_setTilt(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setTilt<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setTilt.
 */
template<class T, typename CT> Callback_CommonHead_setTiltPtr
newCallback_CommonHead_setTilt(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setTilt<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setTilt.
 */
template<class T, typename CT> Callback_CommonHead_setTiltPtr
newCallback_CommonHead_setTilt(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setTilt<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setTilt.
 */
template<class T, typename CT> Callback_CommonHead_setTiltPtr
newCallback_CommonHead_setTilt(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setTilt<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_setNeck.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_setNeck.
 */
template<class T>
class CallbackNC_CommonHead_setNeck : public Callback_CommonHead_setNeck_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_setNeck(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CommonHeadPrx proxy = CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setNeck(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setNeck.
 */
template<class T> Callback_CommonHead_setNeckPtr
newCallback_CommonHead_setNeck(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setNeck<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setNeck.
 */
template<class T> Callback_CommonHead_setNeckPtr
newCallback_CommonHead_setNeck(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setNeck<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setNeck.
 */
template<class T> Callback_CommonHead_setNeckPtr
newCallback_CommonHead_setNeck(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setNeck<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setNeck.
 */
template<class T> Callback_CommonHead_setNeckPtr
newCallback_CommonHead_setNeck(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setNeck<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_setNeck.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_setNeck.
 */
template<class T, typename CT>
class Callback_CommonHead_setNeck : public Callback_CommonHead_setNeck_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_setNeck(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CommonHeadPrx proxy = CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setNeck(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setNeck.
 */
template<class T, typename CT> Callback_CommonHead_setNeckPtr
newCallback_CommonHead_setNeck(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setNeck<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setNeck.
 */
template<class T, typename CT> Callback_CommonHead_setNeckPtr
newCallback_CommonHead_setNeck(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setNeck<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setNeck.
 */
template<class T, typename CT> Callback_CommonHead_setNeckPtr
newCallback_CommonHead_setNeck(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setNeck<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setNeck.
 */
template<class T, typename CT> Callback_CommonHead_setNeckPtr
newCallback_CommonHead_setNeck(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setNeck<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic2DLeft.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_saccadic2DLeft.
 */
template<class T>
class CallbackNC_CommonHead_saccadic2DLeft : public Callback_CommonHead_saccadic2DLeft_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_saccadic2DLeft(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CommonHeadPrx proxy = CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_saccadic2DLeft(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic2DLeft.
 */
template<class T> Callback_CommonHead_saccadic2DLeftPtr
newCallback_CommonHead_saccadic2DLeft(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic2DLeft<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic2DLeft.
 */
template<class T> Callback_CommonHead_saccadic2DLeftPtr
newCallback_CommonHead_saccadic2DLeft(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic2DLeft<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic2DLeft.
 */
template<class T> Callback_CommonHead_saccadic2DLeftPtr
newCallback_CommonHead_saccadic2DLeft(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic2DLeft<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic2DLeft.
 */
template<class T> Callback_CommonHead_saccadic2DLeftPtr
newCallback_CommonHead_saccadic2DLeft(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic2DLeft<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic2DLeft.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_saccadic2DLeft.
 */
template<class T, typename CT>
class Callback_CommonHead_saccadic2DLeft : public Callback_CommonHead_saccadic2DLeft_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_saccadic2DLeft(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CommonHeadPrx proxy = CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_saccadic2DLeft(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic2DLeft.
 */
template<class T, typename CT> Callback_CommonHead_saccadic2DLeftPtr
newCallback_CommonHead_saccadic2DLeft(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic2DLeft<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic2DLeft.
 */
template<class T, typename CT> Callback_CommonHead_saccadic2DLeftPtr
newCallback_CommonHead_saccadic2DLeft(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic2DLeft<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic2DLeft.
 */
template<class T, typename CT> Callback_CommonHead_saccadic2DLeftPtr
newCallback_CommonHead_saccadic2DLeft(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic2DLeft<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic2DLeft.
 */
template<class T, typename CT> Callback_CommonHead_saccadic2DLeftPtr
newCallback_CommonHead_saccadic2DLeft(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic2DLeft<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic2DRight.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_saccadic2DRight.
 */
template<class T>
class CallbackNC_CommonHead_saccadic2DRight : public Callback_CommonHead_saccadic2DRight_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_saccadic2DRight(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CommonHeadPrx proxy = CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_saccadic2DRight(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic2DRight.
 */
template<class T> Callback_CommonHead_saccadic2DRightPtr
newCallback_CommonHead_saccadic2DRight(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic2DRight<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic2DRight.
 */
template<class T> Callback_CommonHead_saccadic2DRightPtr
newCallback_CommonHead_saccadic2DRight(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic2DRight<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic2DRight.
 */
template<class T> Callback_CommonHead_saccadic2DRightPtr
newCallback_CommonHead_saccadic2DRight(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic2DRight<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic2DRight.
 */
template<class T> Callback_CommonHead_saccadic2DRightPtr
newCallback_CommonHead_saccadic2DRight(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic2DRight<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic2DRight.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_saccadic2DRight.
 */
template<class T, typename CT>
class Callback_CommonHead_saccadic2DRight : public Callback_CommonHead_saccadic2DRight_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_saccadic2DRight(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CommonHeadPrx proxy = CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_saccadic2DRight(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic2DRight.
 */
template<class T, typename CT> Callback_CommonHead_saccadic2DRightPtr
newCallback_CommonHead_saccadic2DRight(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic2DRight<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic2DRight.
 */
template<class T, typename CT> Callback_CommonHead_saccadic2DRightPtr
newCallback_CommonHead_saccadic2DRight(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic2DRight<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic2DRight.
 */
template<class T, typename CT> Callback_CommonHead_saccadic2DRightPtr
newCallback_CommonHead_saccadic2DRight(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic2DRight<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic2DRight.
 */
template<class T, typename CT> Callback_CommonHead_saccadic2DRightPtr
newCallback_CommonHead_saccadic2DRight(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic2DRight<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic3D.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_saccadic3D.
 */
template<class T>
class CallbackNC_CommonHead_saccadic3D : public Callback_CommonHead_saccadic3D_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_saccadic3D(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CommonHeadPrx proxy = CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_saccadic3D(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic3D.
 */
template<class T> Callback_CommonHead_saccadic3DPtr
newCallback_CommonHead_saccadic3D(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic3D<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic3D.
 */
template<class T> Callback_CommonHead_saccadic3DPtr
newCallback_CommonHead_saccadic3D(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic3D<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic3D.
 */
template<class T> Callback_CommonHead_saccadic3DPtr
newCallback_CommonHead_saccadic3D(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic3D<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic3D.
 */
template<class T> Callback_CommonHead_saccadic3DPtr
newCallback_CommonHead_saccadic3D(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic3D<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic3D.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_saccadic3D.
 */
template<class T, typename CT>
class Callback_CommonHead_saccadic3D : public Callback_CommonHead_saccadic3D_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_saccadic3D(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CommonHeadPrx proxy = CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_saccadic3D(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic3D.
 */
template<class T, typename CT> Callback_CommonHead_saccadic3DPtr
newCallback_CommonHead_saccadic3D(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic3D<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic3D.
 */
template<class T, typename CT> Callback_CommonHead_saccadic3DPtr
newCallback_CommonHead_saccadic3D(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic3D<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic3D.
 */
template<class T, typename CT> Callback_CommonHead_saccadic3DPtr
newCallback_CommonHead_saccadic3D(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic3D<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic3D.
 */
template<class T, typename CT> Callback_CommonHead_saccadic3DPtr
newCallback_CommonHead_saccadic3D(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic3D<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic4D.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_saccadic4D.
 */
template<class T>
class CallbackNC_CommonHead_saccadic4D : public Callback_CommonHead_saccadic4D_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_saccadic4D(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CommonHeadPrx proxy = CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_saccadic4D(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic4D.
 */
template<class T> Callback_CommonHead_saccadic4DPtr
newCallback_CommonHead_saccadic4D(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic4D<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic4D.
 */
template<class T> Callback_CommonHead_saccadic4DPtr
newCallback_CommonHead_saccadic4D(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic4D<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic4D.
 */
template<class T> Callback_CommonHead_saccadic4DPtr
newCallback_CommonHead_saccadic4D(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic4D<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic4D.
 */
template<class T> Callback_CommonHead_saccadic4DPtr
newCallback_CommonHead_saccadic4D(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic4D<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic4D.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_saccadic4D.
 */
template<class T, typename CT>
class Callback_CommonHead_saccadic4D : public Callback_CommonHead_saccadic4D_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_saccadic4D(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CommonHeadPrx proxy = CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_saccadic4D(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic4D.
 */
template<class T, typename CT> Callback_CommonHead_saccadic4DPtr
newCallback_CommonHead_saccadic4D(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic4D<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic4D.
 */
template<class T, typename CT> Callback_CommonHead_saccadic4DPtr
newCallback_CommonHead_saccadic4D(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic4D<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic4D.
 */
template<class T, typename CT> Callback_CommonHead_saccadic4DPtr
newCallback_CommonHead_saccadic4D(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic4D<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic4D.
 */
template<class T, typename CT> Callback_CommonHead_saccadic4DPtr
newCallback_CommonHead_saccadic4D(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic4D<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_setNMotorsPosition.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_setNMotorsPosition.
 */
template<class T>
class CallbackNC_CommonHead_setNMotorsPosition : public Callback_CommonHead_setNMotorsPosition_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_setNMotorsPosition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CommonHeadPrx proxy = CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setNMotorsPosition(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setNMotorsPosition.
 */
template<class T> Callback_CommonHead_setNMotorsPositionPtr
newCallback_CommonHead_setNMotorsPosition(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setNMotorsPosition<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setNMotorsPosition.
 */
template<class T> Callback_CommonHead_setNMotorsPositionPtr
newCallback_CommonHead_setNMotorsPosition(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setNMotorsPosition<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setNMotorsPosition.
 */
template<class T> Callback_CommonHead_setNMotorsPositionPtr
newCallback_CommonHead_setNMotorsPosition(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setNMotorsPosition<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setNMotorsPosition.
 */
template<class T> Callback_CommonHead_setNMotorsPositionPtr
newCallback_CommonHead_setNMotorsPosition(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setNMotorsPosition<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_setNMotorsPosition.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_setNMotorsPosition.
 */
template<class T, typename CT>
class Callback_CommonHead_setNMotorsPosition : public Callback_CommonHead_setNMotorsPosition_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_setNMotorsPosition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CommonHeadPrx proxy = CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setNMotorsPosition(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setNMotorsPosition.
 */
template<class T, typename CT> Callback_CommonHead_setNMotorsPositionPtr
newCallback_CommonHead_setNMotorsPosition(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setNMotorsPosition<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setNMotorsPosition.
 */
template<class T, typename CT> Callback_CommonHead_setNMotorsPositionPtr
newCallback_CommonHead_setNMotorsPosition(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setNMotorsPosition<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setNMotorsPosition.
 */
template<class T, typename CT> Callback_CommonHead_setNMotorsPositionPtr
newCallback_CommonHead_setNMotorsPosition(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setNMotorsPosition<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_setNMotorsPosition.
 */
template<class T, typename CT> Callback_CommonHead_setNMotorsPositionPtr
newCallback_CommonHead_setNMotorsPosition(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setNMotorsPosition<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_getHeadParams.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_getHeadParams.
 */
template<class T>
class CallbackNC_CommonHead_getHeadParams : public Callback_CommonHead_getHeadParams_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const THeadParams&);

    CallbackNC_CommonHead_getHeadParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CommonHeadPrx proxy = CommonHeadPrx::uncheckedCast(result->getProxy());
        THeadParams ret;
        try
        {
            ret = proxy->end_getHeadParams(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_getHeadParams.
 */
template<class T> Callback_CommonHead_getHeadParamsPtr
newCallback_CommonHead_getHeadParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const THeadParams&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_getHeadParams<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_getHeadParams.
 */
template<class T> Callback_CommonHead_getHeadParamsPtr
newCallback_CommonHead_getHeadParams(T* instance, void (T::*cb)(const THeadParams&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_getHeadParams<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_getHeadParams.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_getHeadParams.
 */
template<class T, typename CT>
class Callback_CommonHead_getHeadParams : public Callback_CommonHead_getHeadParams_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const THeadParams&, const CT&);

    Callback_CommonHead_getHeadParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CommonHeadPrx proxy = CommonHeadPrx::uncheckedCast(result->getProxy());
        THeadParams ret;
        try
        {
            ret = proxy->end_getHeadParams(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_getHeadParams.
 */
template<class T, typename CT> Callback_CommonHead_getHeadParamsPtr
newCallback_CommonHead_getHeadParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const THeadParams&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_getHeadParams<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_getHeadParams.
 */
template<class T, typename CT> Callback_CommonHead_getHeadParamsPtr
newCallback_CommonHead_getHeadParams(T* instance, void (T::*cb)(const THeadParams&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_getHeadParams<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_getHeadState.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_getHeadState.
 */
template<class T>
class CallbackNC_CommonHead_getHeadState : public Callback_CommonHead_getHeadState_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const THeadState&);

    CallbackNC_CommonHead_getHeadState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CommonHeadPrx proxy = CommonHeadPrx::uncheckedCast(result->getProxy());
        THeadState iceP_hState;
        try
        {
            proxy->end_getHeadState(iceP_hState, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_hState);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_getHeadState.
 */
template<class T> Callback_CommonHead_getHeadStatePtr
newCallback_CommonHead_getHeadState(const IceUtil::Handle<T>& instance, void (T::*cb)(const THeadState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_getHeadState<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_getHeadState.
 */
template<class T> Callback_CommonHead_getHeadStatePtr
newCallback_CommonHead_getHeadState(T* instance, void (T::*cb)(const THeadState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_getHeadState<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_getHeadState.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_getHeadState.
 */
template<class T, typename CT>
class Callback_CommonHead_getHeadState : public Callback_CommonHead_getHeadState_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const THeadState&, const CT&);

    Callback_CommonHead_getHeadState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CommonHeadPrx proxy = CommonHeadPrx::uncheckedCast(result->getProxy());
        THeadState iceP_hState;
        try
        {
            proxy->end_getHeadState(iceP_hState, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_hState, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_getHeadState.
 */
template<class T, typename CT> Callback_CommonHead_getHeadStatePtr
newCallback_CommonHead_getHeadState(const IceUtil::Handle<T>& instance, void (T::*cb)(const THeadState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_getHeadState<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_getHeadState.
 */
template<class T, typename CT> Callback_CommonHead_getHeadStatePtr
newCallback_CommonHead_getHeadState(T* instance, void (T::*cb)(const THeadState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_getHeadState<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_isMovingHead.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_isMovingHead.
 */
template<class T>
class CallbackNC_CommonHead_isMovingHead : public Callback_CommonHead_isMovingHead_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_CommonHead_isMovingHead(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CommonHeadPrx proxy = CommonHeadPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_isMovingHead(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_isMovingHead.
 */
template<class T> Callback_CommonHead_isMovingHeadPtr
newCallback_CommonHead_isMovingHead(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_isMovingHead<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_isMovingHead.
 */
template<class T> Callback_CommonHead_isMovingHeadPtr
newCallback_CommonHead_isMovingHead(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_isMovingHead<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompCommonHead::CommonHead::begin_isMovingHead.
 * Create a wrapper instance by calling ::RoboCompCommonHead::newCallback_CommonHead_isMovingHead.
 */
template<class T, typename CT>
class Callback_CommonHead_isMovingHead : public Callback_CommonHead_isMovingHead_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_CommonHead_isMovingHead(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CommonHeadPrx proxy = CommonHeadPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_isMovingHead(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_isMovingHead.
 */
template<class T, typename CT> Callback_CommonHead_isMovingHeadPtr
newCallback_CommonHead_isMovingHead(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_isMovingHead<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonHead::CommonHead::begin_isMovingHead.
 */
template<class T, typename CT> Callback_CommonHead_isMovingHeadPtr
newCallback_CommonHead_isMovingHead(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_isMovingHead<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
