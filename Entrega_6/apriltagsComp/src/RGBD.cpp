// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `RGBD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <RGBD.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::RoboCompRGBD::HardwareFailedException> iceC_RoboCompRGBD_HardwareFailedException_init("::RoboCompRGBD::HardwareFailedException");

const ::std::string iceC_RoboCompRGBD_RGBD_ids[2] =
{
    "::Ice::Object",
    "::RoboCompRGBD::RGBD"
};
const ::std::string iceC_RoboCompRGBD_RGBD_ops[] =
{
    "getData",
    "getDepth",
    "getDepthInIR",
    "getImage",
    "getRGB",
    "getRGBDParams",
    "getRegistration",
    "getXYZ",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setRegistration"
};
const ::std::string iceC_RoboCompRGBD_RGBD_getRGBDParams_name = "getRGBDParams";
const ::std::string iceC_RoboCompRGBD_RGBD_setRegistration_name = "setRegistration";
const ::std::string iceC_RoboCompRGBD_RGBD_getRegistration_name = "getRegistration";
const ::std::string iceC_RoboCompRGBD_RGBD_getData_name = "getData";
const ::std::string iceC_RoboCompRGBD_RGBD_getDepthInIR_name = "getDepthInIR";
const ::std::string iceC_RoboCompRGBD_RGBD_getImage_name = "getImage";
const ::std::string iceC_RoboCompRGBD_RGBD_getDepth_name = "getDepth";
const ::std::string iceC_RoboCompRGBD_RGBD_getRGB_name = "getRGB";
const ::std::string iceC_RoboCompRGBD_RGBD_getXYZ_name = "getXYZ";

}

RoboCompRGBD::HardwareFailedException::~HardwareFailedException()
{
}

const ::std::string&
RoboCompRGBD::HardwareFailedException::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompRGBD::HardwareFailedException";
    return typeId;
}

bool
RoboCompRGBD::RGBD::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompRGBD_RGBD_ids, iceC_RoboCompRGBD_RGBD_ids + 2, s);
}

::std::vector<::std::string>
RoboCompRGBD::RGBD::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_RoboCompRGBD_RGBD_ids[0], &iceC_RoboCompRGBD_RGBD_ids[2]);
}

::std::string
RoboCompRGBD::RGBD::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompRGBD::RGBD::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompRGBD::RGBD";
    return typeId;
}

/// \cond INTERNAL
bool
RoboCompRGBD::RGBD::_iceD_getRGBDParams(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    TRGBDParams ret = this->getRGBDParams(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompRGBD::RGBD::_iceD_setRegistration(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    Registration iceP_value;
    istr->readAll(iceP_value);
    inS.endReadParams();
    this->setRegistration(iceP_value, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompRGBD::RGBD::_iceD_getRegistration(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    Registration ret = this->getRegistration(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompRGBD::RGBD::_iceD_getData(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    imgType iceP_rgbMatrix;
    depthType iceP_distanceMatrix;
    ::RoboCompJointMotor::MotorStateMap iceP_hState;
    ::RoboCompGenericBase::TBaseState iceP_bState;
    this->getData(iceP_rgbMatrix, iceP_distanceMatrix, iceP_hState, iceP_bState, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_rgbMatrix, iceP_distanceMatrix, iceP_hState, iceP_bState);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompRGBD::RGBD::_iceD_getDepthInIR(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    depthType iceP_distanceMatrix;
    ::RoboCompJointMotor::MotorStateMap iceP_hState;
    ::RoboCompGenericBase::TBaseState iceP_bState;
    this->getDepthInIR(iceP_distanceMatrix, iceP_hState, iceP_bState, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_distanceMatrix, iceP_hState, iceP_bState);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompRGBD::RGBD::_iceD_getImage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    ColorSeq iceP_color;
    DepthSeq iceP_depth;
    PointSeq iceP_points;
    ::RoboCompJointMotor::MotorStateMap iceP_hState;
    ::RoboCompGenericBase::TBaseState iceP_bState;
    this->getImage(iceP_color, iceP_depth, iceP_points, iceP_hState, iceP_bState, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_color, iceP_depth, iceP_points, iceP_hState, iceP_bState);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompRGBD::RGBD::_iceD_getDepth(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    DepthSeq iceP_depth;
    ::RoboCompJointMotor::MotorStateMap iceP_hState;
    ::RoboCompGenericBase::TBaseState iceP_bState;
    this->getDepth(iceP_depth, iceP_hState, iceP_bState, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_depth, iceP_hState, iceP_bState);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompRGBD::RGBD::_iceD_getRGB(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ColorSeq iceP_color;
    ::RoboCompJointMotor::MotorStateMap iceP_hState;
    ::RoboCompGenericBase::TBaseState iceP_bState;
    this->getRGB(iceP_color, iceP_hState, iceP_bState, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_color, iceP_hState, iceP_bState);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompRGBD::RGBD::_iceD_getXYZ(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    PointSeq iceP_points;
    ::RoboCompJointMotor::MotorStateMap iceP_hState;
    ::RoboCompGenericBase::TBaseState iceP_bState;
    this->getXYZ(iceP_points, iceP_hState, iceP_bState, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_points, iceP_hState, iceP_bState);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompRGBD::RGBD::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompRGBD_RGBD_ops, iceC_RoboCompRGBD_RGBD_ops + 13, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompRGBD_RGBD_ops)
    {
        case 0:
        {
            return _iceD_getData(in, current);
        }
        case 1:
        {
            return _iceD_getDepth(in, current);
        }
        case 2:
        {
            return _iceD_getDepthInIR(in, current);
        }
        case 3:
        {
            return _iceD_getImage(in, current);
        }
        case 4:
        {
            return _iceD_getRGB(in, current);
        }
        case 5:
        {
            return _iceD_getRGBDParams(in, current);
        }
        case 6:
        {
            return _iceD_getRegistration(in, current);
        }
        case 7:
        {
            return _iceD_getXYZ(in, current);
        }
        case 8:
        {
            return _iceD_ice_id(in, current);
        }
        case 9:
        {
            return _iceD_ice_ids(in, current);
        }
        case 10:
        {
            return _iceD_ice_isA(in, current);
        }
        case 11:
        {
            return _iceD_ice_ping(in, current);
        }
        case 12:
        {
            return _iceD_setRegistration(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
RoboCompRGBD::RGBDPrx::_iceI_getRGBDParams(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<TRGBDParams>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompRGBD_RGBD_getRGBDParams_name);
    outAsync->invoke(iceC_RoboCompRGBD_RGBD_getRGBDParams_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompRGBD::RGBDPrx::_iceI_setRegistration(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, Registration iceP_value, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompRGBD_RGBD_setRegistration_name);
    outAsync->invoke(iceC_RoboCompRGBD_RGBD_setRegistration_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_value);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
RoboCompRGBD::RGBDPrx::_iceI_getRegistration(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Registration>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompRGBD_RGBD_getRegistration_name);
    outAsync->invoke(iceC_RoboCompRGBD_RGBD_getRegistration_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
RoboCompRGBD::RGBDPrx::_iceI_getData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<RGBD::GetDataResult>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompRGBD_RGBD_getData_name);
    outAsync->invoke(iceC_RoboCompRGBD_RGBD_getData_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        },
        [](::Ice::InputStream* istr)
        {
            RGBD::GetDataResult v;
            istr->readAll(v.rgbMatrix, v.distanceMatrix, v.hState, v.bState);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
RoboCompRGBD::RGBDPrx::_iceI_getDepthInIR(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<RGBD::GetDepthInIRResult>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompRGBD_RGBD_getDepthInIR_name);
    outAsync->invoke(iceC_RoboCompRGBD_RGBD_getDepthInIR_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        },
        [](::Ice::InputStream* istr)
        {
            RGBD::GetDepthInIRResult v;
            istr->readAll(v.distanceMatrix, v.hState, v.bState);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
RoboCompRGBD::RGBDPrx::_iceI_getImage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<RGBD::GetImageResult>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompRGBD_RGBD_getImage_name);
    outAsync->invoke(iceC_RoboCompRGBD_RGBD_getImage_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        },
        [](::Ice::InputStream* istr)
        {
            RGBD::GetImageResult v;
            istr->readAll(v.color, v.depth, v.points, v.hState, v.bState);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
RoboCompRGBD::RGBDPrx::_iceI_getDepth(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<RGBD::GetDepthResult>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompRGBD_RGBD_getDepth_name);
    outAsync->invoke(iceC_RoboCompRGBD_RGBD_getDepth_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        },
        [](::Ice::InputStream* istr)
        {
            RGBD::GetDepthResult v;
            istr->readAll(v.depth, v.hState, v.bState);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
RoboCompRGBD::RGBDPrx::_iceI_getRGB(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<RGBD::GetRGBResult>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompRGBD_RGBD_getRGB_name);
    outAsync->invoke(iceC_RoboCompRGBD_RGBD_getRGB_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        },
        [](::Ice::InputStream* istr)
        {
            RGBD::GetRGBResult v;
            istr->readAll(v.color, v.hState, v.bState);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
RoboCompRGBD::RGBDPrx::_iceI_getXYZ(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<RGBD::GetXYZResult>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompRGBD_RGBD_getXYZ_name);
    outAsync->invoke(iceC_RoboCompRGBD_RGBD_getXYZ_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        },
        [](::Ice::InputStream* istr)
        {
            RGBD::GetXYZResult v;
            istr->readAll(v.points, v.hState, v.bState);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
RoboCompRGBD::RGBDPrx::_newInstance() const
{
    return ::IceInternal::createProxy<RGBDPrx>();
}
/// \endcond

const ::std::string&
RoboCompRGBD::RGBDPrx::ice_staticId()
{
    return RGBD::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_RoboCompRGBD_RGBD_getRGBDParams_name = "getRGBDParams";

const ::std::string iceC_RoboCompRGBD_RGBD_setRegistration_name = "setRegistration";

const ::std::string iceC_RoboCompRGBD_RGBD_getRegistration_name = "getRegistration";

const ::std::string iceC_RoboCompRGBD_RGBD_getData_name = "getData";

const ::std::string iceC_RoboCompRGBD_RGBD_getDepthInIR_name = "getDepthInIR";

const ::std::string iceC_RoboCompRGBD_RGBD_getImage_name = "getImage";

const ::std::string iceC_RoboCompRGBD_RGBD_getDepth_name = "getDepth";

const ::std::string iceC_RoboCompRGBD_RGBD_getRGB_name = "getRGB";

const ::std::string iceC_RoboCompRGBD_RGBD_getXYZ_name = "getXYZ";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::RoboCompRGBD::HardwareFailedException> iceC_RoboCompRGBD_HardwareFailedException_init("::RoboCompRGBD::HardwareFailedException");

}

RoboCompRGBD::HardwareFailedException::HardwareFailedException(const ::std::string& what) :
    ::Ice::UserException(),
    what(what)
{
}

RoboCompRGBD::HardwareFailedException::~HardwareFailedException() throw()
{
}

::std::string
RoboCompRGBD::HardwareFailedException::ice_id() const
{
    return "::RoboCompRGBD::HardwareFailedException";
}

RoboCompRGBD::HardwareFailedException*
RoboCompRGBD::HardwareFailedException::ice_clone() const
{
    return new HardwareFailedException(*this);
}

void
RoboCompRGBD::HardwareFailedException::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
RoboCompRGBD::HardwareFailedException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::RoboCompRGBD::HardwareFailedException", -1, true);
    ::Ice::StreamWriter< HardwareFailedException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompRGBD::HardwareFailedException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< HardwareFailedException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::RoboCompRGBD::upCast(RGBD* p) { return p; }

void
::IceProxy::RoboCompRGBD::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< RGBD>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new RGBD;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::_iceI_begin_getRGBDParams(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompRGBD_RGBD_getRGBDParams_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompRGBD_RGBD_getRGBDParams_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompRGBD_RGBD_getRGBDParams_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompRGBD_RGBD_getRGBDParams_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::RoboCompRGBD::TRGBDParams
IceProxy::RoboCompRGBD::RGBD::end_getRGBDParams(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompRGBD_RGBD_getRGBDParams_name);
    ::RoboCompRGBD::TRGBDParams ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::_iceI_begin_setRegistration(::RoboCompRGBD::Registration iceP_value, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompRGBD_RGBD_setRegistration_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompRGBD_RGBD_setRegistration_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompRGBD_RGBD_setRegistration_name, ::Ice::Idempotent, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_value);
        result->endWriteParams();
        result->invoke(iceC_RoboCompRGBD_RGBD_setRegistration_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompRGBD::RGBD::end_setRegistration(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompRGBD_RGBD_setRegistration_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompRGBD::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::_iceI_begin_getRegistration(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompRGBD_RGBD_getRegistration_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompRGBD_RGBD_getRegistration_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompRGBD_RGBD_getRegistration_name, ::Ice::Idempotent, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompRGBD_RGBD_getRegistration_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::RoboCompRGBD::Registration
IceProxy::RoboCompRGBD::RGBD::end_getRegistration(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompRGBD_RGBD_getRegistration_name);
    ::RoboCompRGBD::Registration ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompRGBD::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::_iceI_begin_getData(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompRGBD_RGBD_getData_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompRGBD_RGBD_getData_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompRGBD_RGBD_getData_name, ::Ice::Idempotent, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompRGBD_RGBD_getData_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompRGBD::RGBD::end_getData(::RoboCompRGBD::imgType& iceP_rgbMatrix, ::RoboCompRGBD::depthType& iceP_distanceMatrix, ::RoboCompJointMotor::MotorStateMap& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompRGBD_RGBD_getData_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompRGBD::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_rgbMatrix);
    istr->read(iceP_distanceMatrix);
    istr->read(iceP_hState);
    istr->read(iceP_bState);
    result->_endReadParams();
}

void IceProxy::RoboCompRGBD::RGBD::_iceI_end_getData(::RoboCompRGBD::imgType& iceP_rgbMatrix, ::RoboCompRGBD::depthType& iceP_distanceMatrix, ::RoboCompJointMotor::MotorStateMap& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompRGBD_RGBD_getData_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompRGBD::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_rgbMatrix);
    istr->read(iceP_distanceMatrix);
    istr->read(iceP_hState);
    istr->read(iceP_bState);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::_iceI_begin_getDepthInIR(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompRGBD_RGBD_getDepthInIR_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompRGBD_RGBD_getDepthInIR_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompRGBD_RGBD_getDepthInIR_name, ::Ice::Idempotent, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompRGBD_RGBD_getDepthInIR_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompRGBD::RGBD::end_getDepthInIR(::RoboCompRGBD::depthType& iceP_distanceMatrix, ::RoboCompJointMotor::MotorStateMap& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompRGBD_RGBD_getDepthInIR_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompRGBD::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_distanceMatrix);
    istr->read(iceP_hState);
    istr->read(iceP_bState);
    result->_endReadParams();
}

void IceProxy::RoboCompRGBD::RGBD::_iceI_end_getDepthInIR(::RoboCompRGBD::depthType& iceP_distanceMatrix, ::RoboCompJointMotor::MotorStateMap& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompRGBD_RGBD_getDepthInIR_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompRGBD::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_distanceMatrix);
    istr->read(iceP_hState);
    istr->read(iceP_bState);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::_iceI_begin_getImage(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompRGBD_RGBD_getImage_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompRGBD_RGBD_getImage_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompRGBD_RGBD_getImage_name, ::Ice::Idempotent, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompRGBD_RGBD_getImage_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompRGBD::RGBD::end_getImage(::RoboCompRGBD::ColorSeq& iceP_color, ::RoboCompRGBD::DepthSeq& iceP_depth, ::RoboCompRGBD::PointSeq& iceP_points, ::RoboCompJointMotor::MotorStateMap& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompRGBD_RGBD_getImage_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompRGBD::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_color);
    istr->read(iceP_depth);
    istr->read(iceP_points);
    istr->read(iceP_hState);
    istr->read(iceP_bState);
    result->_endReadParams();
}

void IceProxy::RoboCompRGBD::RGBD::_iceI_end_getImage(::RoboCompRGBD::ColorSeq& iceP_color, ::RoboCompRGBD::DepthSeq& iceP_depth, ::RoboCompRGBD::PointSeq& iceP_points, ::RoboCompJointMotor::MotorStateMap& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompRGBD_RGBD_getImage_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompRGBD::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_color);
    istr->read(iceP_depth);
    istr->read(iceP_points);
    istr->read(iceP_hState);
    istr->read(iceP_bState);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::_iceI_begin_getDepth(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompRGBD_RGBD_getDepth_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompRGBD_RGBD_getDepth_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompRGBD_RGBD_getDepth_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompRGBD_RGBD_getDepth_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompRGBD::RGBD::end_getDepth(::RoboCompRGBD::DepthSeq& iceP_depth, ::RoboCompJointMotor::MotorStateMap& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompRGBD_RGBD_getDepth_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompRGBD::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_depth);
    istr->read(iceP_hState);
    istr->read(iceP_bState);
    result->_endReadParams();
}

void IceProxy::RoboCompRGBD::RGBD::_iceI_end_getDepth(::RoboCompRGBD::DepthSeq& iceP_depth, ::RoboCompJointMotor::MotorStateMap& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompRGBD_RGBD_getDepth_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompRGBD::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_depth);
    istr->read(iceP_hState);
    istr->read(iceP_bState);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::_iceI_begin_getRGB(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompRGBD_RGBD_getRGB_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompRGBD_RGBD_getRGB_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompRGBD_RGBD_getRGB_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompRGBD_RGBD_getRGB_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompRGBD::RGBD::end_getRGB(::RoboCompRGBD::ColorSeq& iceP_color, ::RoboCompJointMotor::MotorStateMap& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompRGBD_RGBD_getRGB_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompRGBD::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_color);
    istr->read(iceP_hState);
    istr->read(iceP_bState);
    result->_endReadParams();
}

void IceProxy::RoboCompRGBD::RGBD::_iceI_end_getRGB(::RoboCompRGBD::ColorSeq& iceP_color, ::RoboCompJointMotor::MotorStateMap& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompRGBD_RGBD_getRGB_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompRGBD::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_color);
    istr->read(iceP_hState);
    istr->read(iceP_bState);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::_iceI_begin_getXYZ(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompRGBD_RGBD_getXYZ_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompRGBD_RGBD_getXYZ_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompRGBD_RGBD_getXYZ_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompRGBD_RGBD_getXYZ_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompRGBD::RGBD::end_getXYZ(::RoboCompRGBD::PointSeq& iceP_points, ::RoboCompJointMotor::MotorStateMap& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompRGBD_RGBD_getXYZ_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompRGBD::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_points);
    istr->read(iceP_hState);
    istr->read(iceP_bState);
    result->_endReadParams();
}

void IceProxy::RoboCompRGBD::RGBD::_iceI_end_getXYZ(::RoboCompRGBD::PointSeq& iceP_points, ::RoboCompJointMotor::MotorStateMap& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompRGBD_RGBD_getXYZ_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompRGBD::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_points);
    istr->read(iceP_hState);
    istr->read(iceP_bState);
    result->_endReadParams();
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::RoboCompRGBD::RGBD::_newInstance() const
{
    return new RGBD;
}
/// \endcond

const ::std::string&
IceProxy::RoboCompRGBD::RGBD::ice_staticId()
{
    return ::RoboCompRGBD::RGBD::ice_staticId();
}

RoboCompRGBD::RGBD::~RGBD()
{
}

/// \cond INTERNAL
::Ice::Object* RoboCompRGBD::upCast(RGBD* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_RoboCompRGBD_RGBD_ids[2] =
{
    "::Ice::Object",
    "::RoboCompRGBD::RGBD"
};

}

bool
RoboCompRGBD::RGBD::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompRGBD_RGBD_ids, iceC_RoboCompRGBD_RGBD_ids + 2, s);
}

::std::vector< ::std::string>
RoboCompRGBD::RGBD::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_RoboCompRGBD_RGBD_ids[0], &iceC_RoboCompRGBD_RGBD_ids[2]);
}

const ::std::string&
RoboCompRGBD::RGBD::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompRGBD::RGBD::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompRGBD::RGBD";
    return typeId;
#else
    return iceC_RoboCompRGBD_RGBD_ids[1];
#endif
}

/// \cond INTERNAL
bool
RoboCompRGBD::RGBD::_iceD_getRGBDParams(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    TRGBDParams ret = this->getRGBDParams(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompRGBD::RGBD::_iceD_setRegistration(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    Registration iceP_value;
    istr->read(iceP_value);
    inS.endReadParams();
    this->setRegistration(iceP_value, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompRGBD::RGBD::_iceD_getRegistration(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    inS.readEmptyParams();
    Registration ret = this->getRegistration(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompRGBD::RGBD::_iceD_getData(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    inS.readEmptyParams();
    imgType iceP_rgbMatrix;
    depthType iceP_distanceMatrix;
    ::RoboCompJointMotor::MotorStateMap iceP_hState;
    ::RoboCompGenericBase::TBaseState iceP_bState;
    this->getData(iceP_rgbMatrix, iceP_distanceMatrix, iceP_hState, iceP_bState, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_rgbMatrix);
    ostr->write(iceP_distanceMatrix);
    ostr->write(iceP_hState);
    ostr->write(iceP_bState);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompRGBD::RGBD::_iceD_getDepthInIR(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    inS.readEmptyParams();
    depthType iceP_distanceMatrix;
    ::RoboCompJointMotor::MotorStateMap iceP_hState;
    ::RoboCompGenericBase::TBaseState iceP_bState;
    this->getDepthInIR(iceP_distanceMatrix, iceP_hState, iceP_bState, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_distanceMatrix);
    ostr->write(iceP_hState);
    ostr->write(iceP_bState);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompRGBD::RGBD::_iceD_getImage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    inS.readEmptyParams();
    ColorSeq iceP_color;
    DepthSeq iceP_depth;
    PointSeq iceP_points;
    ::RoboCompJointMotor::MotorStateMap iceP_hState;
    ::RoboCompGenericBase::TBaseState iceP_bState;
    this->getImage(iceP_color, iceP_depth, iceP_points, iceP_hState, iceP_bState, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_color);
    ostr->write(iceP_depth);
    ostr->write(iceP_points);
    ostr->write(iceP_hState);
    ostr->write(iceP_bState);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompRGBD::RGBD::_iceD_getDepth(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    DepthSeq iceP_depth;
    ::RoboCompJointMotor::MotorStateMap iceP_hState;
    ::RoboCompGenericBase::TBaseState iceP_bState;
    this->getDepth(iceP_depth, iceP_hState, iceP_bState, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_depth);
    ostr->write(iceP_hState);
    ostr->write(iceP_bState);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompRGBD::RGBD::_iceD_getRGB(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ColorSeq iceP_color;
    ::RoboCompJointMotor::MotorStateMap iceP_hState;
    ::RoboCompGenericBase::TBaseState iceP_bState;
    this->getRGB(iceP_color, iceP_hState, iceP_bState, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_color);
    ostr->write(iceP_hState);
    ostr->write(iceP_bState);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompRGBD::RGBD::_iceD_getXYZ(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    PointSeq iceP_points;
    ::RoboCompJointMotor::MotorStateMap iceP_hState;
    ::RoboCompGenericBase::TBaseState iceP_bState;
    this->getXYZ(iceP_points, iceP_hState, iceP_bState, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_points);
    ostr->write(iceP_hState);
    ostr->write(iceP_bState);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_RoboCompRGBD_RGBD_all[] =
{
    "getData",
    "getDepth",
    "getDepthInIR",
    "getImage",
    "getRGB",
    "getRGBDParams",
    "getRegistration",
    "getXYZ",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setRegistration"
};

}

/// \cond INTERNAL
bool
RoboCompRGBD::RGBD::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompRGBD_RGBD_all, iceC_RoboCompRGBD_RGBD_all + 13, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompRGBD_RGBD_all)
    {
        case 0:
        {
            return _iceD_getData(in, current);
        }
        case 1:
        {
            return _iceD_getDepth(in, current);
        }
        case 2:
        {
            return _iceD_getDepthInIR(in, current);
        }
        case 3:
        {
            return _iceD_getImage(in, current);
        }
        case 4:
        {
            return _iceD_getRGB(in, current);
        }
        case 5:
        {
            return _iceD_getRGBDParams(in, current);
        }
        case 6:
        {
            return _iceD_getRegistration(in, current);
        }
        case 7:
        {
            return _iceD_getXYZ(in, current);
        }
        case 8:
        {
            return _iceD_ice_id(in, current);
        }
        case 9:
        {
            return _iceD_ice_ids(in, current);
        }
        case 10:
        {
            return _iceD_ice_isA(in, current);
        }
        case 11:
        {
            return _iceD_ice_ping(in, current);
        }
        case 12:
        {
            return _iceD_setRegistration(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
RoboCompRGBD::RGBD::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< RGBD, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompRGBD::RGBD::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< RGBD, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
RoboCompRGBD::_icePatchObjectPtr(RGBDPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = RGBDPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(RGBD::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
